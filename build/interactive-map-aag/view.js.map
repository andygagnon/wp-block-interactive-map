{"version":3,"file":"interactive-map-aag/view.js","mappings":"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","sources":["webpack://interactive-map-aag/./src/interactive-map-aag/view.js"],"sourcesContent":["/**\n * This script runs on the front end of the site, after the block is rendered.\n * It reads the attributes from the saved HTML and initializes a Mapbox GL JS map.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n    // A function to initialize the map for each instance of the block.\n    function initializeMap(mapElement) {\n        // Check if Mapbox GL JS is loaded before proceeding.\n        if (typeof mapboxgl === 'undefined') {\n            console.error('Mapbox GL JS is not loaded. Please check the plugin PHP file.');\n            return;\n        }\n\n        // Retrieve block attributes from the data attributes of the saved div.\n        const latitude = parseFloat(mapElement.dataset.latitude);\n        const longitude = parseFloat(mapElement.dataset.longitude);\n        const zoom = parseFloat(mapElement.dataset.zoom);\n        const hasUserLocation = mapElement.dataset.hasUserLocation === 'true';\n\n        // NOTE: Replace with your actual Mapbox API token.\n        // This is a crucial step. Without a valid token, the map will not load.\n        mapboxgl.accessToken = 'pk.eyJ1IjoiYW5kcmVnYWdub24iLCJhIjoiY21lbGpoem52MGdwMDJrb2gxZHhqeDF4diJ9._VP-w51o_z8f7T8wAFdtQQ';\n\n        // Set initial viewport for the map.\n        let initialViewport = {\n            center: [longitude, latitude],\n            zoom: zoom\n        };\n\n        // If the block is configured to use the user's location,\n        // try to get it before initializing the map.\n        if (hasUserLocation && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    // Success callback: use the user's location.\n                    initialViewport.center = [position.coords.longitude, position.coords.latitude];\n                    renderMap(mapElement, initialViewport);\n                },\n                (error) => {\n                    // Error callback: log the error and use the default location.\n                    console.error('Geolocation failed:', error);\n                    renderMap(mapElement, initialViewport);\n                }\n            );\n        } else {\n            // If not configured for user location or not supported, render immediately.\n            renderMap(mapElement, initialViewport);\n        }\n    }\n\n    // Function to handle the actual rendering of the map.\n    function renderMap(mapElement, viewport) {\n        // Create a new map div to prevent issues with multiple block instances.\n        const mapContainer = document.createElement('div');\n        mapContainer.className = 'interactive-map-aag-map-container';\n        mapContainer.style.height = '400px'; // Set a fixed height for the map.\n        mapContainer.style.width = '100%';\n        mapElement.innerHTML = ''; // Clear the fallback content.\n        mapElement.appendChild(mapContainer);\n\n        // Initialize the Mapbox GL JS map.\n        const map = new mapboxgl.Map({\n            container: mapContainer,\n            style: 'mapbox://styles/mapbox/streets-v11', // You can choose a different style.\n            center: viewport.center,\n            zoom: viewport.zoom\n        });\n\n        // Add a marker for the user's location.\n        new mapboxgl.Marker().setLngLat(viewport.center).addTo(map);\n\n        // Mock data for dynamic markers. In a real-world scenario, this\n        // would come from an API or CPT.\n        const mockPlaces = [\n            { name: 'Museum of Science', lat: 42.3677, lon: -71.0709 },\n            { name: 'National Air and Space Museum', lat: 38.8878, lon: -77.0202 },\n            { name: 'Exploratorium', lat: 37.8016, lon: -122.3973 },\n        ];\n\n        // Add mock markers to the map.\n        mockPlaces.forEach(place => {\n            new mapboxgl.Marker({ color: 'blue' })\n                .setLngLat([place.lon, place.lat])\n                .setPopup(new mapboxgl.Popup().setHTML(`<h3>${place.name}</h3>`)) // add a popup\n                .addTo(map);\n        });\n\n        // Add a simple zoom and navigation control.\n        map.addControl(new mapboxgl.NavigationControl());\n    }\n\n    // Find all instances of our block on the page.\n    const mapElements = document.querySelectorAll('.wp-block-create-block-interactive-map-aag');\n    mapElements.forEach(initializeMap);\n});\n"],"names":["document","addEventListener","initializeMap","mapElement","mapboxgl","console","error","latitude","parseFloat","dataset","longitude","zoom","hasUserLocation","accessToken","initialViewport","center","navigator","geolocation","getCurrentPosition","position","coords","renderMap","viewport","mapContainer","createElement","className","style","height","width","innerHTML","appendChild","map","Map","container","Marker","setLngLat","addTo","mockPlaces","name","lat","lon","forEach","place","color","setPopup","Popup","setHTML","addControl","NavigationControl","mapElements","querySelectorAll"],"sourceRoot":""}